The recipe for 2.1 is: 
Creating Vulnerability Assessment Plans

Premise:
This recipe will show readers how to use ChatGPT, and also the Open AI API, to generate a vulnerability assessment plan by providing network, system, and business details. This is useful cybersecurity students and beginners to learn the proper methods and tools for vulnerability assessments. It is also for experienced cybersecurity professionals as it can help them save time on planning and documentation.

This will build on the skills from Chapter 1: Establishing the system role, engineering an effective prompt that generates formatted output and also table output. We will further our use of system roles as we give ChatGPT the role of a cybersecurity professional that specializes in vulnerability assessment. We will also further what we learned in the recipes Enhancing Output with Templates (Application: Threat Report) and Formatting Output as a Table (Application: Security Controls Table) as we will engineer the prompt to get the desired output format (using markdown language) in ChatGPT. 

We will then show the reader how to do all of this using the OpenAI API and Python, and then generate the assessment plan as a Microsoft Word file. 



Write the recipe using the following format:

#Recipe Name (Heading 1)

Recipe intro/description. This is also where you can mention how this recipe can be helpful/valuable.

##Getting Ready (Heading 2)

What prerequisites are required before doing this recipe?

##How to do it... (Heading 2)

Provide a lead in sentence or short paragraph to let the reader know what to expect or any other important notes/details prior to beginning the step-by-step instructions.

We will do the ChatGPT version here. Provide step-by-step numbered instructions of how to use the role and prompt in the ChatGPT web UI to get the desired output. 

The following system role will be used:
"You are a cybersecurity professional specializing in vulnerability assessment."

The following user prompt will be used:
Create an assessment plan that includes: Introduction, outline of the process/methodology, tools needed, and a detailed outline of the steps.

Create the plan so that it is specific for the following details:

Network Size: {network_size}
Number of Nodes: {number_of_nodes}
Type of Devices: {type_of_devices}
Specific systems or devices that need to be excluded from the assessment: {special_devices}
Operating Systems: {operating_systems}
Network Topology: {network_topology}
Access Controls: {access_controls}
Previous Security Incidents: {previous_security_incidents}
Compliance Requirements: {compliance_requirements}
Business Critical Assets: {business_critical_assets}
Data Classification: {data_classification}
Goals and objectives of the vulnerability assessment: {goals}
Timeline for the vulnerability assessment: {timeline}
Team: {team}
Expected deliverables of the assessment: {deliverables}
Audience: {audience}

Provide the plan using the following format and markdown language:

#Vulnerability Assessment Plan

##Introduction
Introduction

##Process/Methodology
Outline of the process/Methodology

##Tools Required
List of required tools and applications

##Assessment Steps
Detailed outline of the assessment steps

 

##How it works...  (Heading 2)

Explain how/why this recipe works, breaking down each code block if code is used.

##There's more... (Heading 2)

Ok now we will do the "There's more..." part of this recipe.

We will do the OpenAI API script version here. Basically do what you did for the "How to do it..." part, but for the OpenAI API version instead of ChatGPT. Use a lead-in sentence or short paragraph and then be sure to relate this back to the ChatGPT version. It's going to be almost exactly like the previous recipe "Threat Assessment using ChatGPT and MITRE ATT&CK Framework". The Python script will get the input data from a text file, and that input will replace all of the text in brackets "{text}" in the prompt, just like in the previous recipe.

Divide the code up into easily digestible blocks (usually where the comments might be). After the steps, explain how each step/code block works.

If you understand and are ready, go ahead and generate the lead-in. Then, I'll provide you with the code that I wrote, for you to write this section.

At the end (or in notes/hints), we should mention that the model can be changed to GPT-4 or whatever in order to get different/better results, and the message parameters can be modified. The prompt can also be adjusted and tweaked in order to get the results the user wants. Also need to add a NOTE/HINT to mention that this recipe is only the tip of the iceberg. This technique can be significantly expanded by adding minimum word count and more details to the prompt. I encourage the reader to experiment.

Code:

import openai
import os
from docx import Document
from tqdm import tqdm
import threading
import time
from datetime import datetime

# Set up the OpenAI API
openai.api_key = os.getenv("OPENAI_API_KEY")

current_datetime = datetime.now().strftime('%Y-%m-%d_%H-%M-%S')
assessment_name = f"Vuln_Assessment_Plan_{current_datetime}"

def read_user_input_file(file_path: str) -> dict:
    user_data = {}
    with open(file_path, 'r') as file:
        for line in file:
            key, value = line.strip().split(':')
            user_data[key.strip()] = value.strip()
    return user_data

user_data_file = "assessment_data.txt" 
user_data = read_user_input_file(user_data_file)

# Function to generate a report using the OpenAI API
def generate_report(network_size, 
                    number_of_nodes, 
                    type_of_devices, 
                    special_devices, 
                    operating_systems, 
                    network_topology, 
                    access_controls, 
                    previous_security_incidents,
                    compliance_requirements,
                    business_critical_assets,
                    data_classification,
                    goals,
                    timeline,
                    team,
                    deliverables,
                    audience: str) -> str:

    # Define the conversation messages
    messages = [
        {"role": "system", "content": "You are a cybersecurity professional specializing in vulnerability assessment."},
        {"role": "user", "content": f'Using cybersecurity industry standards and best practices, create a complete and detailed assessment plan (not a penetration test) that includes: Introduction, outline of the process/methodology, tools needed, and a very detailed multi-layered outline of the steps. Provide a thorough and descriptive introduction and as much detail and description as possible throughout the plan. The plan should not only assessment of technical vulnerabilities on systems but also policies, procedures, and compliance. It should include the use of scanning tools as well as configuration review, staff interviews, and site walk-around. All recommendations should following industry standard best practices and methods. The plan should be a minimum of 1500 words.\n\
        Create the plan so that it is specific for the following details:\n\
        Network Size: {network_size}\n\
        Number of Nodes: {number_of_nodes}\n\
        Type of Devices: {type_of_devices}\n\
        Specific systems or devices that need to be excluded from the assessment: {special_devices}\n\
        Operating Systems: {operating_systems}\n\
        Network Topology: {network_topology}\n\
        Access Controls: {access_controls}\n\
        Previous Security Incidents: {previous_security_incidents}\n\
        Compliance Requirements: {compliance_requirements}\n\
        Business Critical Assets: {business_critical_assets}\n\
        Data Classification: {data_classification}\n\
        Goals and objectives of the vulnerability assessment: {goals}\n\
        Timeline for the vulnerability assessment: {timeline}\n\
        Team: {team}\n\
        Expected deliverables of the assessment: {deliverables}\n\
        Audience: {audience}\n\
        Provide the plan using the following format and observe the markdown language:\n\
        #Vulnerability Assessment Plan\n\
        ##Introduction\n\
        Introduction\n\
        ##Process/Methodology\n\
        Outline of the process/Methodology\n\
        ##Tools Required\n\
        List of required tools and applications\n\
        ##Assessment Steps\n\
        Detailed outline of the assessment steps'}
    ]

    # Call the OpenAI API
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=messages,
        max_tokens=2048,
        n=1,
        stop=None,
        temperature=0.7,
    )

    # Return the generated text
    return response['choices'][0]['message']['content'].strip()

# Function to convert markdown text to a Word document
def markdown_to_docx(markdown_text: str, output_file: str):
    document = Document()

    # Iterate through the lines of the markdown text
    for line in markdown_text.split('\n'):

        # Add headings based on the markdown heading levels
        if line.startswith('# '):
            document.add_heading(line[2:], level=1)
        elif line.startswith('## '):
            document.add_heading(line[3:], level=2)
        elif line.startswith('### '):
            document.add_heading(line[4:], level=3)
        elif line.startswith('#### '):
            document.add_heading(line[5:], level=4)
        # Add paragraphs for other text
        else:
            document.add_paragraph(line)

    # Save the Word document
    document.save(output_file)

# Function to display elapsed time while waiting for the API call
def display_elapsed_time():
    start_time = time.time()
    while not api_call_completed:
        elapsed_time = time.time() - start_time
        print(f"\rCommunicating with the API - Elapsed time: {elapsed_time:.2f} seconds", end="")
        time.sleep(1)

# Get user input
# threat_name = input("Enter the name of a cyber threat: ")

api_call_completed = False
elapsed_time_thread = threading.Thread(target=display_elapsed_time)
elapsed_time_thread.start()

# Handle exceptions during the API call
try:
    # Generate the report using the OpenAI API
    report = generate_report(
    user_data["Network Size"],
    user_data["Number of Nodes"],
    user_data["Type of Devices"],
    user_data["Specific systems or devices that need to be excluded from the assessment"],
    user_data["Operating Systems"],
    user_data["Network Topology"],
    user_data["Access Controls"],
    user_data["Previous Security Incidents"],
    user_data["Compliance Requirements"],
    user_data["Business Critical Assets"],
    user_data["Data Classification"],
    user_data["Goals and objectives of the vulnerability assessment"],
    user_data["Timeline for the vulnerability assessment"],
    user_data["Team"],
    user_data["Expected deliverables of the assessment"],
    user_data["Audience"]
    )

    api_call_completed = True
    elapsed_time_thread.join()
except Exception as e:
    api_call_completed = True
    elapsed_time_thread.join()
    print(f"\nAn error occurred during the API call: {e}")
    exit()

# Save the report as a Word document
docx_output_file = f"{assessment_name}_report.docx"

# Handle exceptions during the report generation
try:
    with tqdm(total=1, desc="Generating plan") as pbar:
        markdown_to_docx(report, docx_output_file)
        pbar.update(1)
    print("\nPlan generated successfully!")
except Exception as e:
    print(f"\nAn error occurred during the plan generation: {e}")




You are a cybersecurity professional specializing in vulnerability assessment.
 
Using cybersecurity industry standards and best practices, create a complete and detailed assessment plan (not a penetration test) that includes: Introduction, outline of the process/methodology, tools needed, and a very detailed multi-layered outline of the steps. Provide a thorough and descriptive introduction and as much detail and description as possible throughout the plan. The plan should not only assessment of technical vulnerabilities on systems but also policies, procedures, and compliance. It should include the use of scanning tools as well as configuration review, staff interviews, and site walk-around. All recommendations should following industry standard best practices and methods. The plan should be a minimum of 1500 words.

Create the plan so that it is specific for the following details:

Network Size: Large
Number of Nodes: 1000
Type of Devices: Desktops, Laptops, Printers, Routers
Specific systems or devices that need to be excluded from the assessment: None
Operating Systems: Windows 10, MacOS, Linux
Network Topology: Star
Access Controls: Role-based access control
Previous Security Incidents: 3 incidents in the last year
Compliance Requirements: HIPAA
Business Critical Assets: Financial data, Personal health information
Data Classification: Highly confidential
Goals and objectives of the vulnerability assessment: To identify and prioritize potential vulnerabilities in the network and provide recommendations for remediation and risk mitigation.
Timeline for the vulnerability assessment: 4 weeks
Team: 3 cybersecurity professionals, including a vulnerability assessment lead and two security analysts
Expected deliverables of the assessment: A detailed report outlining the results of the vulnerability assessment, including identified vulnerabilities, their criticality, potential impact on the network, and recommendations for remediation and risk mitigation.
Audience: The organization's IT department, senior management, and any external auditors or regulators.

Provide the plan using the following format and markdown language:

#Vulnerability Assessment Plan

##Introduction
Thorough Introduction to the plan including the scope, reasons for doing it, goals and objectives, and summary of the plan

##Process/Methodology
Description and Outline of the process/Methodology

##Tools Required
List of required tools and applications, with their descriptions and reasons needed

##Assessment Steps
Detailed, multi-layered outline of the assessment steps